/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.20
 * Generated at: 2024-04-04 05:20:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class lol_005fchampion_005fchoice_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>L.O.L Champion Choice</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <form action=\"/champion/choice\" method=\"post\">\r\n");
      out.write("    ");

        String campName = (String) request.getAttribute("campName");
        System.out.println("choice campName = " + campName);
    
      out.write("\r\n");
      out.write("    <h1> ");
      out.print( campName );
      out.write(" 챔피언을 선택해주세요.</h1>\r\n");
      out.write("        <input type=\"hidden\" name=\"campName\" value=\"");
      out.print( campName );
      out.write("\">\r\n");
      out.write("        ");

            switch (campName) {
                case "데마시아" :
        
      out.write("\r\n");
      out.write("                <select name=\"championName\" id=\"champion\">\r\n");
      out.write("                    <option value=\"가렌\">가렌</option>\r\n");
      out.write("                    <option value=\"럭스\">럭스</option>\r\n");
      out.write("                    <option value=\"갈리오\">갈리오</option>\r\n");
      out.write("                    <option value=\"자르반4세\">자르반4세</option>\r\n");
      out.write("                    <option value=\"뽀삐\">뽀삐</option>\r\n");
      out.write("                </select>\r\n");
      out.write("        ");

                break;
                case "공허" :
        
      out.write("\r\n");
      out.write("                <select name=\"championName\">\r\n");
      out.write("                    <option value=\"초가스\">초가스</option>\r\n");
      out.write("                    <option value=\"카직스\">카직스</option>\r\n");
      out.write("                    <option value=\"벨베스\">벨베스</option>\r\n");
      out.write("                    <option value=\"벨코즈\">벨코즈</option>\r\n");
      out.write("                    <option value=\"카사딘\">카사딘</option>\r\n");
      out.write("                </select>\r\n");
      out.write("        ");

                break;
                case "녹서스" :
        
      out.write("\r\n");
      out.write("                <select name=\"championName\">\r\n");
      out.write("                    <option value=\"다리우스\">다리우스</option>\r\n");
      out.write("                    <option value=\"카타리나\">카타리나</option>\r\n");
      out.write("                    <option value=\"드레이븐\">드레이븐</option>\r\n");
      out.write("                    <option value=\"스웨인\">스웨인</option>\r\n");
      out.write("                    <option value=\"사미라\">사미라</option>\r\n");
      out.write("                </select>\r\n");
      out.write("        ");

                break;
                case "프렐요드" :
        
      out.write("\r\n");
      out.write("                <select name=\"championName\">\r\n");
      out.write("                    <option value=\"애쉬\">애쉬</option>\r\n");
      out.write("                    <option value=\"트린다미어\">트린다미어</option>\r\n");
      out.write("                    <option value=\"세주아니\">세주아니</option>\r\n");
      out.write("                    <option value=\"누누와윌럼프\">누누와윌럼프</option>\r\n");
      out.write("                    <option value=\"브라움\">브라움</option>\r\n");
      out.write("                </select>\r\n");
      out.write("        ");

                break;
                case "자운" :
        
      out.write("\r\n");
      out.write("                <select name=\"championName\">\r\n");
      out.write("                    <option value=\"빅토르\">빅토르</option>\r\n");
      out.write("                    <option value=\"신지드\">신지드</option>\r\n");
      out.write("                    <option value=\"우르곳\">우르곳</option>\r\n");
      out.write("                    <option value=\"자크\">자크</option>\r\n");
      out.write("                    <option value=\"트위치\">트위치</option>\r\n");
      out.write("                </select>\r\n");
      out.write("        ");

                break;
                }
        
      out.write("\r\n");
      out.write("        <button type=\"submit\">선 택 완 료</button>\r\n");
      out.write("    </form>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
